swagger: '2.0'
info:
  version: '1.0'
  title: "is21"
  description: this is a simple API for the IS2 course.
  license:
    name: MIT
    url: https://github.com/apiaryio/polls-api/blob/master/LICENSE
host: polls.apiblueprint.org
basePath: /
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /users:
    post:
      description: >-
       Create a new user
      summary: Create user
      parameters: 
        - name: infos
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        201:
          description: 'User created succesfully'
        400:
          description: 'Username already present'
    delete:
      summary: 'Delete an user'
      description: 'Delete an user from database'
      parameters: 
        - name: credentials
          in: body
          required: true
          schema:
            $ref: '#/definitions/Credentials'
      responses:
        200:
          description: OK
        401:
          description: 'Wrong credentials'
  /users/login:
    post:
      description: >-
       Login as a user
      summary: User login
      parameters: 
        - name: credentials
          in: body
          required: true
          schema:
            $ref: '#/definitions/Credentials'
      responses:
        200:
          description: 'Login succesful'
          schema:
            type: object
            required: 
             - token
            properties:
              token:
                type: string
        401:
          description: 'Login failed'
  /users/logout:
    post:
      summary: 'User logout'
      description: 'Log out from current token session'
      parameters: 
        - name: token
          in: body
          required: true
          schema:
            type: object
            required: 
              - token
            properties:
              token:
                type: string
      responses:
        200:
          description: 'Logged out'
        400:
          description: 'Invalid token'
  /users/{id}/info:
    get:
      summary: 'Get user info'
      description: 'Get user info by id'
      parameters: 
        - name: id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: OK
  /tasks:
    post:
      summary: 'Create task'
      description: 'Create a task with answers'
      parameters: 
        - name: task
          in: body
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        200:
          description: OK
        400:
          description: 'Task id unavailable'
    delete:
      summary: 'Delete task'
      description: 'Delete a task by id'
      parameters:
        - name: id
          in: body
          required: true
          schema:
            type: object
            required: 
            - id
            properties:
              id:
                 type: integer
      responses:
        200:
          description: OK
    patch:
      summary: 'Edit task'
      description: 'Edit task body'
      parameters: 
        - name: task
          in: body
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        200:
          description: OK
        400:
          description: 'Task not found'
  /exams:
    post:
      summary: "Create exam"
      description: "Create an exam with questions"
      parameters: 
        - name: "properties"
          in: body
          required: true
          schema:
            $ref: '#/definitions/Exam'
      responses:
        200:
          description: OK
        400:
          description: "Exam id unavailable"
    delete:
      summary: "Delete exam"
      description: "Delete an exam by id"
      parameters: 
        - name: id
          in: body
          required: true
          schema:
            required: 
              - id
            properties:
              id:
                type: integer
      responses:
        200:
          description: OK
    get:
      summary: "Get exams list"
      description: "Get exams list"
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Exam'
  /exams/{ownerId}:
    get:
      summary: 'List exams created by ownerId'
      description: 'List exams created by ownerId'
      parameters: 
        - name: ownerId
          in: path
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Exam'
  /exam/{examId}/mark:
    post:
      summary: 'Give exam a mark'
      description: 'Give a mark to an exam'
      parameters: 
        - name: examId
          required: true
          in: path
          type: integer
        - name: mark
          required: true
          in: body
          schema:
            type: object
            required: 
              - mark
            properties:
              mark:
                type: integer
      responses:
        200:
          description: OK
  /review:
    post:
      summary: 'Create a review of a task'
      description: 'Create a review of a task'
      parameters: 
        - name: review
          in: body
          required: true
          schema:
            $ref: '#/definitions/Review'
      responses:
        200:
          description: OK
        400:
          description: "Exam id or task id not found"
  /review/{examId}:
    get:
      summary: 'List reviews of exam'
      description: 'List reviews of an exam by id'
      parameters: 
        - name: examId
          required: true
          in: path
          type: integer
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Review'
  /group:
    post:
      summary: 'Create a group'
      description: 'Create a group'
      parameters: 
        - name: group
          in: body
          required: true
          schema:
            $ref: '#/definitions/Group'
      responses:
        200:
          description: OK
  /group/{id}/addUser:
    post:
      summary: 'Add user to group'
      description: 'Add an user to a group'
      parameters: 
        - name: id
          in: path
          required: true
          type: integer
        - name: userId
          in: body
          required: true
          schema:
            $ref: '#/definitions/Id'
      responses:
        200:
          description: OK
        400:
          description: 'Group id not found'
        401:
          description: "You can't join this group, noob"
  /group/{id}/addExam:
    post:
      summary: 'Add exam to group'
      description: 'Add an exan to a group'
      parameters: 
        - name: id
          in: path
          required: true
          type: integer
        - name: examId
          in: body
          required: true
          schema:
            $ref: '#/definitions/Id'
      responses:
        200:
          description: OK
        400:
          description: 'Group id not found'
        401:
          description: "You can't join this group, noob"
definitions:
  User:
    type: object
    required: 
      - first_name
      - last_name
      - username
      - email
      - password
    properties:
      first_name:
        type: string
      last_name:
        type: string
      username:
        type: string
      email:
        type: string
      password:
        type: string
  Credentials:
    type: object
    properties:
      username:
        type: string
        example: "pincopallino"
      password:
        type: "string"
        example: "passwordSegreta"
  Answer:
    type: object
    properties:
      text: 
        type: string
        example: "Vero"
      correct:
        type: boolean
        example: true
  Task:
    type: object
    properties:
      id:
        type: integer
      owner_id:
        type: integer
      task_type:
        enum: [SINGLE, MULTIPLE, OPEN]
      text:
        type: string
        example: 'Quanto fa 2+2?'
      aswers:
        type: array
        items:
          $ref: '#/definitions/Answer'
  Exam:
    type: object
    properties:
      id:
        type: integer
      owner_id:
        type: integer
      questions: 
        type: array
        items:
          $ref: '#/definitions/Task'
      mark:
        type: integer
  Review:
    type: object
    properties:
      id:
        type: integer
      owner_id:
        type: integer
      task_id:
        type: integer
      exam_id:
        type: integer
      correct:
        type: boolean
      comment:
        type: string
        example: "Veramente hai segnato quella risposta??? WTF"
  Group:
    type: object
    properties:
      id:
        type: integer
      owner_id:
        type: integer
      exams:
        type: array
        items:
          $ref: '#/definitions/Exam'
      user_ids:
        type: array
        items:
          $ref: '#/definitions/Id'
  Id:
    type: integer