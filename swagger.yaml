swagger: '2.0'
info:
  version: '1.0'
  title: "is21"
  description: api for managing exams and students
  license:
    name: MIT
    url: https://github.com/apiaryio/polls-api/blob/master/LICENSE
host: polls.apiblueprint.org
basePath: /
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /users:
    post:
      description: 'Create a new user'
      summary: 'Create user'
      parameters:
        - name: infos
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        201:
          description: 'User created successfully'
        400:
          description: 'Username already present'
  /users/login:
    post:
      description: 'Login as a user'
      summary: 'User login'
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            $ref: '#/definitions/Credentials'
      responses:
        200:
          description: 'Login successful'
          schema:
            $ref: '#/definitions/Token'
        403:
          description: 'Login failed, missing credentials'

  /users/logout:
    post:
      summary: 'User logout'
      description: 'Log out from current token session'
      parameters:
        - name: token
          in: body
          required: true
          schema:
            $ref: '#/definitions/Token'
      
      responses:
        200:
          description: 'Logged out'
        400:
          description: 'Invalid token'

  /users/{user_id}:
    get:
      summary: 'Get user info'
      description: 'Get user info by id'
      parameters:
        - name: user_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: 'OK'
        404:
          description: 'User not found'

    put:
      summary: 'Change user info'
      description: 'Change user info by id (credentials needed)'
      parameters:
        -   name: user_id
            in: path
            required: true
            type: integer
        -   name: credentials
            in: body
            required: true
            schema:
              $ref: '#/definitions/Credentials'
      responses:
        200:
          description: 'User info changed'
        403:
          description: 'Invalid credentials'
        404:
          description: 'User not found'

    delete:
      summary: 'Delete an user'
      description: 'Delete an user by id (credentials needed)'
      parameters:
        -   name: user_id
            in: path
            required: true
            type: integer

        -   name: credentials
            in: body
            required: true
            schema:
              $ref: '#/definitions/Credentials'
      responses:
        204:
          description: 'User deleted'
        404:
          description: 'User not found'

  /tasks:
    get:
      summary: 'Get tasks'
      description: 'Get the tasks list'
      responses:
        200:
          description: 'OK'

    post:
      summary: 'Create task'
      description: 'Create a task with answers'
      parameters:
        - name: task
          in: body
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        200:
          description: OK

  /tasks/{task_id}:
    get:
      summary: 'Get task info'
      description: 'Get a task information by id'
      parameters:
        - name: task_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: 'OK'
        404:
          description: 'Task not found'

    delete:
      summary: 'Delete task'
      description: 'Delete an existing task by id'
      parameters:
        - name: task_id
          in: path
          required: true
          type: integer
      responses:
        204:
          description: 'Task deleted'
        404:
          description: 'Task not found'
          
    patch:
      summary: 'Update task info'
      description: 'Update task info by id'
      parameters:
        - name: task_id
          in: path
          required: true
          type: integer
        - name: task_info
          in: body
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        200:
          description: 'Task updated'
        404:
          description: 'Task not found'
  /exams:
    get:
      summary: 'Get exams list'
      description: 'Get the exams list'
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/ArrayOfExams'

    post:
      summary: 'Create exam'
      description: 'Create an exam with questions'
      parameters:
        - name: "properties"
          in: body
          required: true
          schema:
            $ref: '#/definitions/Exam'
      responses:
        200:
          description: 'OK'
        400:
          description: "Exam id unavailable"

  /exams/{exam_id}:
    get:
      summary: 'Get exam'
      description: 'Get an exam tasks'
      parameters:
        - name: exam_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: 'OK'
        404:
          description: 'Exam not found'
          
    patch:
      summary: 'Update exam'
      description: 'Update exam tasks by id'
      parameters:
        - name: exam_id
          in: path
          required: true
          type: integer
        - name: exam_update
          in: body
          required: true
          schema:
            $ref: '#/definitions/Exam'
      responses:
        200:
          description: 'Exam updated'
        404:
          description: 'Exam not found'
          
    delete:
      summary: 'Delete an exam'
      description: 'Delete an existing exam by id'
      parameters:
        - name: exam_id
          in: path
          required: true
          type: integer
      responses:
        204:
          description: 'Exam deleted'
        404:
          description: 'Exam not found'

  /exams/{exam_id}/marks:
    get:
      summary: 'Get exam marks'
      description: 'Get all marks from an exam'
      parameters:
        - name: 'exam_id'
          in: path
          required: true
          type: integer
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/ArrayOfMarks'
        404:
          description: 'Exam not found'

  /exam/{exam_id}/reviews:
    get:
      summary: 'List reviews of exam'
      description: 'List reviews of an exam by id'
      parameters:
        - name: exam_id
          required: true
          in: path
          type: integer
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ArrayOfReviews'
            
  /exams/{ownerId}/owner:
    get:
      summary: 'List exams created by ownerId'
      description: 'List exams created by ownerId'
      parameters:
        - name: ownerId
          in: path
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ArrayOfExams'

  /reviews:
    post:
      summary: 'Create a review of a task'
      description: 'Create a review of a task'
      parameters:
        - name: review
          in: body
          required: true
          schema:
            $ref: '#/definitions/Review'
      responses:
        200:
          description: OK
        400:
          description: "Exam id or task id not found"
  
  /review/{reviews_id}:
    get:
      summary: 'Get review data'
      description: 'Get the review data'
      parameters:
        - name: reviews_id
          required: true
          in: path
          type: integer
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Review'
    put: 
      summary: 'Change review data'
      description: 'Change the review data'
      parameters:
        - name: reviews_id
          required: true
          in: path
          type: integer
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Review'
        401:
          description: 'Unauthorized' 
    delete:
      summary: 'Delete review'
      description: 'Delete the review'
      parameters:
        - name: reviews_id
          required: true
          in: path
          type: integer
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Review'
        401:
          description: 'Unauthorized' 
  /group:
    post:
      summary: 'Create a group'
      description: 'Create a group'
      parameters:
        - name: group
          in: body
          required: true
          schema:
            $ref: '#/definitions/Group'
      responses:
        200:
          description: OK
  /group/{group_id}:
    put:
      summary: 'Update a group'
      description: 'Update a group'
      parameters:
          - name: group_id
            in: path
            required: true
            type: integer
          - name: group
            in: body
            required: true
            schema:
              $ref: '#/definitions/Group'
      responses:
        200:
          description: OK
        400:
          description: 'Group id not found'
        401:
          description: "You can't manage this group, noob"
    delete:
      summary: 'Delete a group'
      description: 'Delete a group'
      parameters:
          - name: group_id
            in: path
            required: true
            type: integer
      responses:
        200:
          description: OK
        400:
          description: 'Group id not found'
        401:
          description: "You can't manage this group, noob"
  /group/{group_id}/user:
    post:
      summary: 'Add user to group'
      description: 'Add an user to a group'
      parameters:
        - name: group_id
          in: path
          required: true
          type: integer
        - name: userId
          in: body
          required: true
          schema:
            $ref: '#/definitions/Id'
      responses:
        200:
          description: OK
        400:
          description: 'Group id not found'
        401:
          description: "You can't join this group, noob"
    delete:
      summary: 'Remove user from group'
      description: 'Remove user from the group'
      parameters:
        - name: group_id
          in: path
          required: true
          type: integer
        - name: userId
          in: body
          required: true
          schema:
            $ref: '#/definitions/Id'
      responses:
          200:
            description: OK
          400:
            description: 'Params do not match'
          401:
            description: "You can't manage this group"
          
  /group/{group_id}/exam:
    post:
      summary: 'Add exam to group'
      description: 'Add an exan to a group'
      parameters:
        - name: group_id
          in: path
          required: true
          type: integer
        - name: examId
          in: body
          required: true
          schema:
            $ref: '#/definitions/Id'
      responses:
        200:
          description: OK
        400:
          description: 'Group id not found'
        401:
          description: "You can't join this group, noob"
    delete:
      summary: 'Remove exam from group'
      description: 'Remove an exam from a group'
      parameters:
        - name: group_id
          in: path
          required: true
          type: integer
        - name: examId
          in: body
          required: true
          schema:
            $ref: '#/definitions/Id'
      responses:
        200:
          description: OK
        400:
          description: 'Parameters do not match'
        401:
          description: "You can't manage this group"
          
  /submission:
    post:
      summary: 'Add a submission'
      description: "Add a new submission"
      parameters: 
        - name: submission
          in: body
          required: true
          schema:
            $ref: '#/definitions/Submission'
      responses:
        200:
          description: OK
          
  /submission/{submission_id}:
    get: 
      summary: 'See submission specification'
      description: 'See the submission specification' 
      parameters:
        - name: submission_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: OK
        404:
          description: 'Submission not found'
    delete: 
      summary: 'Delete submission'
      description: 'Delete the submission' 
      parameters:
        - name: submission_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: OK
        404:
          description: 'Submission not found'
      
  /submission/{submission_id}/mark:
    post:
      summary: 'Add vote to the submission'
      description: 'Add a vote to the submission'
      parameters: 
        - name: submission_id
          in: path 
          required: true
          type: integer
        - name: mark
          in: body
          required: true
          schema:
            $ref: '#/definitions/Mark'
      responses: 
        200:
          description: OK
        401:
          description: 'Unauthorized'
        404: 
          description: 'Submission not found'
    put:
      summary: 'Change submission mark'
      description: 'Change the submission mark'
      parameters:
          - name: submission_id
            in: path
            required: true
            type: integer
          - name: mark
            in: body
            required: true
            schema:
              $ref: '#/definitions/Mark'
      responses:
        200:
          description: 'Submission mark changed'
        401:
          description: 'Unauthorized'
        404:
          description: 'Submission not found'
definitions:
  User:
    type: object
    required:
      - first_name
      - last_name
      - username
      - email
      - password
    properties:
      first_name:
        type: string
      last_name:
        type: string
      username:
        type: string
      email:
        type: string
      password:
        type: string
  Credentials:
    type: object
    properties:
      username:
        type: string
        example: "pincopallino"
      password:
        type: "string"
        example: "passwordSegreta"
  Answer:
    type: object
    properties:
      text:
        type: string
        example: "Vero"
      correct:
        type: boolean
        example: true
  Task:
    type: object
    properties:
      id:
        type: integer
      owner_id:
        type: integer
      task_type:
        enum: [SINGLE, MULTIPLE, OPEN]
      text:
        type: string
        example: 'Quanto fa 2+2?'
      aswers:
        type: array
        items:
          $ref: '#/definitions/Answer'
  Exam:
    type: object
    properties:
      id:
        type: integer
      owner_id:
        type: integer
      questions:
        type: array
        items:
          $ref: '#/definitions/Task'
      mark:
        type: integer
  Review:
    type: object
    properties:
      id:
        type: integer
      owner_id:
        type: integer
      task_id:
        type: integer
      submission_id:
        type: integer
      correct:
        type: boolean
      comment:
        type: string
        example: "Veramente hai segnato quella risposta??? WTF"
  Group:
    type: object
    properties:
      id:
        type: integer
      owner_id:
        type: integer
      exams:
        type: array
        items:
          $ref: '#/definitions/Exam'
      user_ids:
        type: array
        items:
          $ref: '#/definitions/Id'
  Submission:
    type: object
    properties:
      id:
        type: integer 
      user_id:
        type: integer
      exam_id:
        type: integer
      mark:
        type: integer
      
  Id:
    type: integer

  Token:
    type: string
    
  Mark:
    type: integer
    
  ArrayOfMarks:
    type: array
    items:
        $ref: '#/definitions/Mark'
        
  ArrayOfExams:
    type: array
    items:
        $ref: '#/definitions/Exam'
        
  ArrayOfReviews:
    type: array
    items:
        $ref: '#/definitions/Review'