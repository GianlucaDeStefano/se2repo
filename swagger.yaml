swagger: '2.0'
info:
  version: '1.0'
  title: "is21"
  description: api for managing exams and students
  license:
    name: MIT
    url: https://github.com/apiaryio/polls-api/blob/master/LICENSE
host: polls.apiblueprint.org
basePath: /
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /users:
    post:
      description: 'Create a new user'
      summary: 'Create user'
      parameters:
        - name: infos
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        201:
          description: 'User created successfully'
          schema:
            $ref: '#/definitions/UserData' # returns every user data without the psw
        400:
          description: 'Error creating user, missing or wrong data'
  /users/login:
    post:
      description: 'Login as a user'
      summary: 'User login'
      parameters:
        - name: credentials #username and psw
          in: body
          required: true
          schema:
            $ref: '#/definitions/Credentials'
      responses:
        200:
          description: 'Login successful'
          schema:
            $ref: '#/definitions/Token'
        401:
          description: 'Login failed, missing credentials'
        403:
          description: 'Unauthorized, wrong credentials'


  /users/logout:
    post:
      summary: 'User logout'
      description: 'Log out from current token session'
      parameters:
        - name: token
          in: body
          required: true
          schema:
            $ref: '#/definitions/Token'
      responses:
        204:
          description: 'Logged out'
        400:
          description: 'Invalid token'

  /users/{user_id}:
    get:
      summary: 'Get user info'
      description: 'Get user info by id'
      parameters:
        - name: user_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/UserData' #User data without psw
        404:
          description: 'User not found'
    patch:
      summary: 'Change user info'
      description: 'Change user info by id (credentials needed)'
      parameters:
        -   name: user_id
            in: path
            required: true
            type: integer
        -   name: infos
            in: body
            required: true
            schema:
              $ref: '#/definitions/User'
      responses:
        200:
          description: 'User info changed'
          schema:
            $ref: '#/definitions/UserData'
        403:
          description: 'Invalid credentials'
        404:
          description: 'User not found'
    delete:
      summary: 'Delete an user'
      description: 'Delete an user by id (credentials needed)'
      parameters:
        -   name: user_id
            in: path
            required: true
            type: integer
      responses:
        204:
          description: 'User deleted'
        404:
          description: 'User not found'
        401:
          description: 'Unauthorized'

  /exams:
    get:
      summary: 'Get exams list'
      description: 'Get the exams list'
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/ArrayOfExams'
        204:
          description: 'No exams'
    post:
      summary: 'Create exam'
      description: 'Create an exam with questions'
      parameters:
        - name: "properties"
          in: body
          required: true
          schema:
            $ref: '#/definitions/ExamData'
      responses:
        201:
          description: 'OK'
          schema:
            $ref: '#/definitions/Exam'
        400:
          description: "Error creating exams"

  /exams/{exam_id}:
    get:
      summary: 'Get exam'
      description: 'Get an exam tasks'
      parameters:
        - name: exam_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/Exam'
        404:
          description: 'Exam not found'
    patch:
      summary: 'Update exam'
      description: 'Update exam tasks by id'
      parameters:
        - name: exam_id
          in: path
          required: true
          type: integer
        - name: exam_update
          in: body
          required: true
          schema:
            $ref: '#/definitions/ExamData'
      responses:
        200:
          description: 'Exam updated'
          schema:
            $ref: '#/definitions/Exam'
        404:
          description: 'Exam not found'

    delete:
      summary: 'Delete an exam'
      description: 'Delete an existing exam by id'
      parameters:
        - name: exam_id
          in: path
          required: true
          type: integer
      responses:
        204:
          description: 'Exam deleted'
        404:
          description: 'Exam not found'

  /exams/{exam_id}/marks:
    get:
      summary: 'Get exam marks'
      description: 'Get all marks from an exam'
      parameters:
        - name: 'exam_id'
          in: path
          required: true
          type: integer
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/ArrayOfMarks'
        401:
          description: 'Unauthorized'
        404:
          description: 'Exam not found'

  /exams/{owner_id}/owner:
    get:
      summary: 'List exams created by ownerId'
      description: 'List exams created by ownerId'
      parameters:
        - name: owner_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ArrayOfExams'
        204:
          description: 'No exams'
        404:
          description: 'Owner not found'
        401:
          description: 'Unauthorized'

  /tasks:
    get:
      summary: 'Get tasks'
      description: 'Get the tasks list'
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/ArrayOfTasks'
        204:
          description: 'No content'
    post:
      summary: 'Create task'
      description: 'Create a task with answers'
      parameters:
        - name: task
          in: body
          required: true
          schema:
            $ref: '#/definitions/TaskData'
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/Task'
        400:
          description: 'Error creating exam'

  /tasks/{task_id}:
    get:
      summary: 'Get task info'
      description: 'Get a task information by id'
      parameters:
        - name: task_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/Task'
        404:
          description: 'Task not found'

    delete:
      summary: 'Delete task'
      description: 'Delete an existing task by id'
      parameters:
        - name: task_id
          in: path
          required: true
          type: integer
      responses:
        204:
          description: 'Task deleted'
        404:
          description: 'Task not found'
        401:
          description: 'Unauthorized'

    patch:
      summary: 'Update task info'
      description: 'Update task info by id'
      parameters:
        - name: task_id
          in: path
          required: true
          type: integer
        - name: task_info
          in: body
          required: true
          schema:
            $ref: '#/definitions/TaskData'
      responses:
        200:
          description: 'Task updated'
          schema:
            $ref: '#/definitions/TaskData'
        404:
          description: 'Task not found'
        401:
          description: 'Unauthorized'

  /tasks/{task_id}/answer:
    get:
      summary: 'get task answer'
      description: 'get the task answer'
      parameters:
        - name: task_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/Answer'
        204:
          description: 'Answer not present'
        404:
          description: 'Task not found'
    put:
      summary: 'add answer'
      description: 'add answer to the task'
      parameters:
        - name: task_id
          in: path
          required: true
          type: integer
        - name: answer_data
          in: body
          required: true
          schema:
            $ref: '#/definitions/TaskData'
      responses:
        201:
          description: 'Created'
        401:
          description: 'Unauthorized'
        404:
          description: 'Task not found'
    patch:
      summary: 'update answer'
      description: 'update answer of the test'
      parameters:
        - name: task_id
          in: path
          required: true
          type: integer
        - name: answer_data
          in: body
          required: true
          schema:
            $ref: '#/definitions/TaskData'
      responses:
        200:
          description: 'Updated'
          schema:
            $ref: '#/definitions/TaskData'
        401:
          description: 'Unauthorized'
        404:
          description: 'Task not found'
    delete:
      summary: 'Delete an answer'
      description: 'Delete a task answer by task id'
      parameters:
        - name: task_id
          in: path
          required: true
          type: integer
      responses:
        201:
          description: 'Answer deleted successfully'
        401:
          description: 'Unauthorized'
        404:
          description: 'Task not found'
  /reviews:
    post:
      summary: 'Create a review of a task'
      description: 'Create a review of a task'
      parameters:
        - name: review
          in: body
          required: true
          schema:
            $ref: '#/definitions/ReviewData'
      responses:
        201:
          description: 'Review created successfully'
        400:
          description: "Exam id or task id not found"

  /reviews/{review_id}:
    get:
      summary: 'Get review data'
      description: 'Get the review data'
      parameters:
        - name: review_id
          required: true
          in: path
          type: integer
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Review'
        404:
          description: 'Review not found'
    patch:
      summary: 'Change review data'
      description: 'Change the review data'
      parameters:
        - name: review_id
          required: true
          in: path
          type: integer
        - name: data
          required: true
          in: body
          schema:
            type: object
            required:
              - comment
            properties:
              comment:
                type: string

      responses:
        200:
          description: 'Review modified successfully'
        401:
          description: 'Unauthorized'
        404:
          description: 'Review not found'
    delete:
      summary: 'Delete review'
      description: 'Delete the review'
      parameters:
        - name: review_id
          required: true
          in: path
          type: integer
      responses:
        204:
          description: 'Deleted'
        401:
          description: 'Unauthorized'
  /groups:
    post:
      summary: 'Create a group'
      description: 'Create a group'
      parameters:
        - name: group
          in: body
          required: true
          schema:
            $ref: '#/definitions/GroupData'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Group'
        400:
          description: 'Error creating group'

  /groups/{group_id}:
    patch:
      summary: 'Update a group'
      description: 'Update a group'
      parameters:
          - name: group_id
            in: path
            required: true
            type: integer
          - name: group
            in: body
            required: true
            schema:
              $ref: '#/definitions/GroupData'
      responses:
        200:
          description: OK
        404:
          description: 'Group id not found'
        401:
          description: "You can't manage this group"
        400:
          description: 'Unable to update this group'
    delete:
      summary: 'Delete a group'
      description: 'Delete a group'
      parameters:
          - name: group_id
            in: path
            required: true
            type: integer
      responses:
        204:
          description: OK
        404:
          description: 'Group id not found'
        401:
          description: "You can't manage this group"
  /groups/{group_id}/user:
    put:
      summary: 'Add user to group'
      description: 'Add an user to a group'
      parameters:
        - name: group_id
          in: path
          required: true
          type: integer
        - name: user_id
          in: body
          required: true
          schema:
            $ref: '#/definitions/Id'
      responses:
        200:
          description: 'OK'
        404:
          description: 'Group id not found'
        401:
          description: "You manage this group"
    delete:
      summary: 'Remove user from group'
      description: 'Remove user from the group'
      parameters:
        - name: group_id
          in: path
          required: true
          type: integer
        - name: userId
          in: body
          required: true
          schema:
            $ref: '#/definitions/Id'
      responses:
          204:
            description: OK
          400:
            description: 'Params do not match'
          401:
            description: "You can't manage this group"

  /groups/{group_id}/exam:
    put:
      summary: 'Add exam to group'
      description: 'Add an exan to a group'
      parameters:
        - name: group_id
          in: path
          required: true
          type: integer
        - name: exam_id
          in: body
          required: true
          schema:
            $ref: '#/definitions/Id'
      responses:
        200:
          description: OK
        404:
          description: 'Group id or exam id not found'
        401:
          description: "You can't manage this group"
    delete:
      summary: 'Remove exam from group'
      description: 'Remove an exam from a group'
      parameters:
        - name: group_id
          in: path
          required: true
          type: integer
        - name: exam_id
          in: body
          required: true
          schema:
            $ref: '#/definitions/Id'
      responses:
        204:
          description: OK
        400:
          description: 'Parameters do not match'
        401:
          description: "You can't manage this group"

  /submissions:
    post:
      summary: 'Add a submission'
      description: "Add a new submission"
      parameters:
        - name: submission
          in: body
          required: true
          schema:
            $ref: '#/definitions/SubmissionData'
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/Submission'
        401:
          description: 'Unathorized'

  /submissions/{submission_id}:
    get:
      summary: 'See submission specification'
      description: 'See the submission specification'
      parameters:
        - name: submission_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/Submission'
        404:
          description: 'Submission not found'
    delete:
      summary: 'Delete submission'
      description: 'Delete the submission'
      parameters:
        - name: submission_id
          in: path
          required: true
          type: integer
      responses:
        204:
          description: OK
        401:
          description: 'Unathorized'
        404:
          description: 'Submission not found'

  /submissions/{submission_id}/mark:
    put:
      summary: 'Add vote to the submission'
      description: 'Add a vote to the submission'
      parameters:
        - name: submission_id
          in: path
          required: true
          type: integer
        - name: mark
          in: body
          required: true
          schema:
            $ref: '#/definitions/Mark'
      responses:
        200:
          description: 'Mark added'
        401:
          description: 'Unauthorized'
        404:
          description: 'Submission not found'
    patch:
      summary: 'Change submission mark'
      description: 'Change the submission mark'
      parameters:
          - name: submission_id
            in: path
            required: true
            type: integer
          - name: mark
            in: body
            required: true
            schema:
              $ref: '#/definitions/Mark'
      responses:
        200:
          description: 'Submission mark changed'
        401:
          description: 'Unauthorized'
        404:
          description: 'Submission not found'
definitions:
  User:
    type: object
    required:
      - user_id
      - first_name
      - last_name
      - username
      - email
      - password
    properties:
      user_id:
        type: integer
      first_name:
        type: string
      last_name:
        type: string
      username:
        type: string
      email:
        type: string
      password:
        type: string
  UserData:
    type: object
    required:
      - user_id
      - first_name
      - last_name
      - username
      - email
    properties:
      user_id:
        type: integer
      first_name:
        type: string
      last_name:
        type: string
      username:
        type: string
      email:
        type: string
  Credentials:
    type: object
    properties:
      username:
        type: string
        example: "pincopallino"
      password:
        type: "string"
        example: "passwordSegreta"
  Answer:
    type: object
    properties:
      text:
        type: string
        example: "Vero"
      correct:
        type: boolean
        example: true
  Task:
    type: object
    properties:
      id:
        type: integer
      owner_id:
        type: integer
      task_type:
        enum: [SINGLE, MULTIPLE, OPEN]
      text:
        type: string
        example: 'Quanto fa 2+2?'
      aswers_id:
        type: integer

  TaskData:
    type: object
    properties:
      owner_id:
        type: integer
      task_type:
        enum: [SINGLE, MULTIPLE, OPEN]
      text:
        type: string
        example: 'Quanto fa 2+2?'
      aswers_id:
        type: integer

  Exam:
    type: object
    properties:
      id:
        type: integer
      owner_id:
        type: integer
      questions:
        type: array
        items:
          $ref: '#/definitions/Task'
  ExamData: #exam without the id (needed when creating the exam)
    type: object
    properties:
      owner_id:
        type: integer
      questions:
        type: array
        items:
          $ref: '#/definitions/Task'
  Review:
    type: object
    properties:
      id:
        type: integer
      owner_id:
        type: integer
      submission_id:
        type: integer
      task_id:
        type: integer
      comment:
        type: string
        example: "That is not the correct answer"
  ReviewData:
    type: object
    properties:
      owner_id:
        type: integer
      submission_id:
        type: integer
      task_id:
        type: integer
      comment:
        type: string
        example: "That is not the correct answer"
  Group:
    type: object
    properties:
      id:
        type: integer
      owner_id:
        type: integer
      exams:
        type: array
        items:
          $ref: '#/definitions/Exam'
      user_ids:
        type: array
        items:
          $ref: '#/definitions/Id'
  GroupData:
    type: object
    properties:
      owner_id:
        type: integer
      exams:
        type: array
        items:
          $ref: '#/definitions/Exam'
      user_ids:
        type: array
        items:
          $ref: '#/definitions/Id'
  Submission:
    type: object
    properties:
      id:
        type: integer
      user_id:
        type: integer
      exam_id:
        type: integer
      answer:
        type: array
        items:
            $ref: '#/definitions/Answer'
  SubmissionData:
    type: object
    properties:
      user_id:
        type: integer
      exam_id:
        type: integer
      answer:
        type: array
        items:
            $ref: '#/definitions/Answer'


  Id:
    type: integer

  Token:
    type: string

  Mark:
    type: integer

  ArrayOfMarks:
    type: array
    items:
        $ref: '#/definitions/Mark'

  ArrayOfExams:
    type: array
    items:
        $ref: '#/definitions/Exam'

  ArrayOfTasks:
    type: array
    items:
        $ref: '#/definitions/Task'
